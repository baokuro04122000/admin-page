openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://auth-server-btn-v1.herokuapp.com/v1
info:
  description: This is a BT API document
  version: 1.0.1
  title: BT API document
  contact:
    email: baotrandinh100@gmail.com
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
  - name: Auth
    description: Authentication
  - name: Admin
    description: Admin
  - name: Seller
    description: Seller
  - name: WithDraw Request
    description: WithDraw Request

paths:
  /auth/login:
    post:
      security: []
      tags:
        - Auth
      description: |
        User Login by Email and Password
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCredentials"
        description: email and password
      responses:
        "200":
          description: login successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCredentialResponse"
        "400":
          description: invalid email or password format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: incorrect email or password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/register:
    post:
      tags:
        - Auth
      description: User sign up an local account
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegister"
      responses:
        "200":
          description: Server will send an email to user to active this account then it sets a cookie with the value {"active_account":false, expired:60s}
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnouceSuccess"
        "400":
          description: errors of the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
                
  /auth/mobile-register:
    post:
      tags:
        - Auth
      description: User sign up an local account - spend for mobile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserMobileRegister"
      responses:
        "200":
          description: Server will send an email to user to active this account then it sets a cookie with the value {"active_account":false, expired:60s}
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnouceSuccess"
        "400":
          description: errors of the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  
  /auth/seller-register-request:
    get:
      tags:
        - Auth
      description: User sign up seller account by token and this user need to sign in before
      responses:
        "200":
          description: Server will send an email to the email of user to access the register seller page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnouceSuccess"
        "400":
          description: errors of the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  
  /auth/check-seller-register-request:
    post:
      tags:
        - Auth
      description: Check the token is valid to access the seller register page
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequestSignUpSeller"
      responses:
        "200":
          description: Server will send an email to the email of user to access the register seller page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnouceSuccess"
        "400":
          description: errors of the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
                
  /auth/seller-register:
    post:
      tags:
        - Auth
      description: API seller register account
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SellerRegisterRequest"
      responses:
        "200":
          description: Server will send an email to the email of user to access the register seller page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnouceSuccess"
        "400":
          description: errors of the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
                
  /auth/delete-files:
    post:
      tags:
        - Auth
      description: Delete file by token
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteImagesRequest"
      responses:
        "200":
          description: Server will send an email to the email of user to access the register seller page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnouceSuccess"
        "400":
          description: errors of the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  
  /auth/otp-register:
    post:
      tags:
        - Auth
      description: User active account that it just created - mobile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OTPRequestActive"
      responses:
        "200":
          description: Server send message success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnouceSuccess"
        "400":
          description: errors of the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  
  /auth/email-reset-password:
    post:
      tags:
        - Auth
      description: Send mail to reset password - step 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPasswordRequest"
      responses:
        "200":
          description: Server will send OTP code to your email
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnouceSuccess"
        "400":
            description: Invalid Email Format/Email is not Registered
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ErrorResponse"
        "500":
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ErrorResponse"  
  
  /auth/otp-reset-password:
    post:
      tags:
        - Auth
      description: OTP matched then server will send for you verify token to reset password - step 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OTPRequest"
      responses:
        "200":
          description: Server will send verify code to you, then you get it  to reset password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTPResponse"
        "400":
            description: Invalid otp code
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ErrorResponse"
        "500":
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ErrorResponse"
  
  /auth/reset-password:
    post:
      tags:
        - Auth
      description: Reset password follow by verify token - final step
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordRequest"
      responses:
        "200":
          description: Reset password is success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnouceSuccess"
        "400":
            description: Invalid verify code
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ErrorResponse"
        "500":
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ErrorResponse"
  
  /auth/refresh-token:
    get:
      tags:
        - Auth
      description: Refresh token when access token is expired
      responses:
        "200":
          description: return a new payload + access_token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCredentialResponse"
        "400":
          description: error token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  
  /api/oauth/google:
    get:
      tags:
        - Auth
      description: Login by google account
      responses:
        "200":
          description: redirect user for the web page
        "400":
          description: errors are from google api
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/me:
    get:
      tags:
        - Auth
      description: Get user when login by google successfully
      responses:
        "200":
          description: login by google successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCredentialResponse"
        "400":
          description: errors are from google api
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  
  /auth/logout:
    get:
      tags:
        - Auth
      description: Users can only log themselves out, not other users
      responses:
        "200":
          description: Logout was successful, clear refresh_token in redis
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnouceSuccess'
        "400":
          description: server has some errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"




components:
  
  schemas:
    UserCredentials:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: baotrandinh100@gmail.com
        password:
          type: string
          example: abc#1234
    
    UserRegister:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
        - gender
      properties:
        email:
          type: string
          example: baotrandinh100@gmail.com
        password:
          type: string
          description: Password must be 8-16 characters and contain both numbers and letters characters
          example: 12345678b
        firstName:
          type: string
        lastName:
          type: string
        gender:
          type: string
          description: it kind of a checkbok
          example: "male | female "
    
    UserMobileRegister:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
        - gender
      properties:
        email:
          type: string
          example: baotrandinh100@gmail.com
        password:
          type: string
          description: Password must be 8-16 characters and contain both numbers and letters characters
          example: 12345678b
        firstName:
          type: string
        lastName:
          type: string
        gender:
          type: string
          description: it kind of a checkbok
          example: "male | female "
          
    
    UserRequestSignUpSeller:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          example: 1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed
    
    
    ForgotPassword:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          example: baotrandinh100@gmail.com

    UserCredentialResponse:
      type: object
      properties:
        access_token:
          type: string
        data:
          type: object
          properties:
            id:
              type: string
            email:
              type: string
            firstName:
              type: string
            lastName:
              type: string
            nickName:
              type: string
            role:
              type: string
              example: user | seller
            profilePicture:
              type: string
            meta:
              type: object
              properties:
                totalBuy:
                  type: integer
                totalCancel:
                  type: integer
            typeLogin:
              type: string
              example: local | google
            special:
              type: array
              example: ['friendly']
              items: 
                $ref: "#/components/schemas/SellerDetail"
            sellers:
              items:
                $ref: "#/components/schemas/SellerDetail"
                
    SellerRegisterRequest:
      description: the info of seller will send to server to create a seller account
      type: object
      required:
        - name
        - slogan
        - phone
      properties:
        token:
          type: string
          description: check role
        fbLink:
          type: string
        inLink:
          type: string
        name:
          type: string
          description: name is unique
          example: BTN Shop
        slogan:
          type: string
          example: Just do it!
        phone:
          type: string
          example: 0329460523
        logo:
          type: object
          description: The logo of shop
          properties:
            fileLink: 
              type: string
            fileId:
              type: string
        proof:
          type: array
          description: It help the seller confirm the Genuine Store
          items:
            type: object
            properties:
              fileLink:
                type: string
              fileId:
                type: string
    ErrorResponse:
      description: Error responses are sent when an error (e.g. unauthorized, bad request) occurred.
      type: object
      properties:
        status:
          description: the status of response.
          type: integer
          example: 400
        errors:
          type: object
          properties:
            message:
              type: string
              example: Email is existed
        
    UserDetail:
      description: user detail information
      type: object
      properties:
        id:
          type: string
          example: 63312b2a82dc64f45360ff5a
        role:
          type: string
          example: 'seller'
        email:
          type: string
          example: baotrandinh100@gmail.com
        name:
          type: string
          example: bao tran
        meta:
          type: object
          properties:
            totalBuy:
              type: integer
              default: 0
            totalCancel:
              type: string
              default: 0
        createdAt:
          type: string
          example: 2022-09-26T04:31:38.535+00:00
        updatedAt:
          type: string
          example: 2022-09-26T04:31:54.365+00:00
          
    
    SellerDetail:
      description: Seller detail information
      type: object
      properties:
        id:
          type: string
          example: 63312b2a82dc64f45360ff5a
        name:
          description: the brand of shop
          type: string
          example: HAPPY SHOP
        slogan:
          type: string
          example: you can do it!
        type:
          type: string
          example: normal | mall | global
        meta:
          type: object
          items: 
            $ref: "#/components/schemas/MetaSeller"
        isDisable:
          description: to implement lock the account of seller
          type: boolean
          default: false
            
    MetaSeller:
      description: some information that it relate the shop of seller
      type: object
      properties:
        totalSole:
          type: number
          default: 0
        totalProduct:
          type: number
          default: 0
        totalEvaluation:
          type: number
          default: 0
        ranking: 
          type: number
          default: 0
        title:
          type: string
          example: the best seller
          
    DeleteImagesRequest:
      description: API to save a list of photos to delete
      type: object
      properties:
        id:
          type: string
          description: the field that it is unique
        token:
          type: string
        fileList:
          type: array
          items:
            type: string
            example: file id
            
    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          example: baotrandinh100@gmail.com
          
    OTPRequest:
      type: object
      required:
        - otp
      description: OTP got from your email
      properties:
        otp:
          type: integer
          example: 123456
    
    OTPRequestActive:
      type: object
      required:
        - email
        - otp
      description: OTP got from your email
      properties:
        email:
          type: string
        otp:
          type: integer
          
    ResetPasswordRequest:
      type: object
      properties:
        token:
          type: string
        password:
          type: string
          example: "12345678a"
          
    AnnouceSuccess:
      type: object
      properties:
        status:
          type: integer
          example: 200
        data:
          type: object
          properties:
            message:
              type: string
              example: "register is success, please check your email to active account"
    
    OTPResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            token:
              type: string
              example: "12312-dasd-dasdasd"
    
    